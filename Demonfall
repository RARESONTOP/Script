
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local CoreGui = game:GetService("CoreGui")

local ESPs = {}

local function FindHealthValue(character)
    -- Example: Search for a value named "Health"
    for _, descendant in ipairs(character:GetDescendants()) do
        if descendant:IsA("NumberValue") and descendant.Name == "Health" then
            return descendant
        end
    end
    return nil
end

local function CreateESP(player)
    local Box = Drawing.new("Square")
    Box.Color = Color3.new(1, 0, 0)
    Box.Thickness = 2
    Box.Transparency = 1
    Box.Filled = false
    
    local NameTag = Drawing.new("Text")
    NameTag.Color = Color3.new(1, 1, 1)
    NameTag.Size = 16
    NameTag.Center = true
    NameTag.Outline = true
    
    local HealthBarBackground = Drawing.new("Square")
    HealthBarBackground.Color = Color3.new(0, 0, 0)
    HealthBarBackground.Thickness = 1
    HealthBarBackground.Filled = true

    local HealthBar = Drawing.new("Square")
    HealthBar.Thickness = 1
    HealthBar.Filled = true

    ESPs[player] = {
        Box = Box,
        NameTag = NameTag,
        HealthBarBackground = HealthBarBackground,
        HealthBar = HealthBar
    }

    local function GetHealthColor(healthPercent)
        if healthPercent >= 0.75 then
            return Color3.new(0, 1, 0) -- Green for high health
        elseif healthPercent >= 0.5 then
            return Color3.new(1, 1, 0) -- Yellow for mid health
        elseif healthPercent >= 0.25 then
            return Color3.new(1, 0.5, 0) -- Orange for low health
        else
            return Color3.new(1, 0, 0) -- Red for very low health
        end
    end

    local function UpdateESP(character)
        if not character:FindFirstChild("HumanoidRootPart") or not character:FindFirstChild("Head") then return end
        local rootPart = character.HumanoidRootPart
        local head = character.Head
        local healthValue = FindHealthValue(character)

        local pos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)
        local headPos, headOnScreen = Camera:WorldToViewportPoint(head.Position)
        
        if onScreen then
            -- Update box
            local size = Vector2.new(2000 / pos.Z, 3000 / pos.Z)
            ESPs[player].Box.Size = size
            ESPs[player].Box.Position = Vector2.new(pos.X - size.X / 2, pos.Y - size.Y / 2)
            ESPs[player].Box.Visible = true
            
            -- Update name
            ESPs[player].NameTag.Position = Vector2.new(pos.X, pos.Y - size.Y / 2 - 20)
            ESPs[player].NameTag.Text = player.Name
            ESPs[player].NameTag.Visible = true
            
            if healthValue then
                local currentHealth = healthValue.Value
                local maxHealth = 100 -- Default to 100 if max health is unknown
                local healthPercent = currentHealth / maxHealth

                -- Health bar background
                local healthBarWidth = 5
                local healthBarX = ESPs[player].Box.Position.X - 10
                local healthBarHeight = ESPs[player].Box.Size.Y
                ESPs[player].HealthBarBackground.Size = Vector2.new(healthBarWidth, healthBarHeight)
                ESPs[player].HealthBarBackground.Position = Vector2.new(healthBarX, ESPs[player].Box.Position.Y)
                ESPs[player].HealthBarBackground.Visible = true
                
                -- Health bar
                local healthBarHeightFilled = ESPs[player].Box.Size.Y * healthPercent
                local healthBarY = ESPs[player].Box.Position.Y + ESPs[player].Box.Size.Y - healthBarHeightFilled
                ESPs[player].HealthBar.Size = Vector2.new(healthBarWidth, healthBarHeightFilled)
                ESPs[player].HealthBar.Position = Vector2.new(healthBarX, healthBarY)
                ESPs[player].HealthBar.Color = GetHealthColor(healthPercent)
                ESPs[player].HealthBar.Visible = true
            else
                ESPs[player].HealthBar.Visible = false
                ESPs[player].HealthBarBackground.Visible = false
            end
        else
            ESPs[player].Box.Visible = false
            ESPs[player].NameTag.Visible = false
            ESPs[player].HealthBar.Visible = false
            ESPs[player].HealthBarBackground.Visible = false
        end
    end

    local function Cleanup()
        ESPs[player].Box:Remove()
        ESPs[player].NameTag:Remove()
        ESPs[player].HealthBarBackground:Remove()
        ESPs[player].HealthBar:Remove()
        ESPs[player] = nil
    end

    player.CharacterAdded:Connect(function(character)
        character:WaitForChild("Humanoid").Died:Connect(Cleanup)
        RunService.RenderStepped:Connect(function()
            if character and character:FindFirstChild("HumanoidRootPart") then
                UpdateESP(character)
            else
                Cleanup()
            end
        end)
    end)

    if player.Character then
        player.Character:WaitForChild("Humanoid").Died:Connect(Cleanup)
        RunService.RenderStepped:Connect(function()
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                UpdateESP(player.Character)
            else
                Cleanup()
            end
        end)
    end
end

local function OnPlayerAdded(player)
    if player ~= Players.LocalPlayer then
        CreateESP(player)
    end
end

-- Connect OnPlayerAdded to PlayerAdded event
Players.PlayerAdded:Connect(OnPlayerAdded)

-- Iterate through existing players
for _, player in ipairs(Players:GetPlayers()) do
    OnPlayerAdded(player)
end

-- Iterate through new players
Players.PlayerAdded:Connect(OnPlayerAdded)

-- Iterate through existing players again to ensure all are covered
for _, player in ipairs(Players:GetPlayers()) do
    OnPlayerAdded(player)
end

-- Removing previous ESPs
for _, child in ipairs(CoreGui:GetChildren()) do
    if child:IsA("Drawing") then
        child:Remove()
    end
end

-- Function to get a list of player names in the workspace
local function getPlayerNames()
    local playerNames = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    return playerNames
end


local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local CoreGui = game:GetService("CoreGui")

local ESPs = {}

local function FindHealthValue(character)
    for _, descendant in ipairs(character:GetDescendants()) do
        if descendant:IsA("NumberValue") and descendant.Name == "Health" then
            return descendant
        end
    end
    return nil
end

local function CreateESP(character)
    local Box = Drawing.new("Square")
    Box.Color = Color3.new(1, 1, 1)
    Box.Thickness = 2
    Box.Transparency = 1
    Box.Filled = false
    
    local NameTag = Drawing.new("Text")
    NameTag.Color = Color3.new(0, 0, 1) -- Blue color
    NameTag.Size = 16
    NameTag.Center = true
    NameTag.Outline = true
    
    local HealthBarBackground = Drawing.new("Square")
    HealthBarBackground.Color = Color3.new(0, 0, 0)
    HealthBarBackground.Thickness = 1
    HealthBarBackground.Filled = true

    local HealthBar = Drawing.new("Square")
    HealthBar.Thickness = 1
    HealthBar.Filled = true

    ESPs[character] = {
        Box = Box,
        NameTag = NameTag,
        HealthBarBackground = HealthBarBackground,
        HealthBar = HealthBar
    }

    local function GetHealthColor(healthPercent)
        return Color3.fromHSV(healthPercent * 0.33, 1, 1)
    end

    local function UpdateESP()
        if not character:FindFirstChild("HumanoidRootPart") or not character:FindFirstChild("Head") then return end
        local rootPart = character.HumanoidRootPart
        local head = character.Head
        local healthValue = FindHealthValue(character)

        local pos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)
        local headPos, headOnScreen = Camera:WorldToViewportPoint(head.Position)
        
        if onScreen then
            -- Update box
            local size = Vector2.new(2000 / pos.Z, 3000 / pos.Z)
            ESPs[character].Box.Size = size
            ESPs[character].Box.Position = Vector2.new(pos.X - size.X / 2, pos.Y - size.Y / 2)
            ESPs[character].Box.Visible = true
            
            -- Update name
            ESPs[character].NameTag.Position = Vector2.new(pos.X, pos.Y - size.Y / 2 - 20)
            ESPs[character].NameTag.Text = character.Name
            ESPs[character].NameTag.Visible = true
            
            if healthValue then
                local currentHealth = healthValue.Value
                local maxHealth = 100 -- Default to 100 if max health is unknown
                local healthPercent = currentHealth / maxHealth

                -- Health bar background
                local healthBarWidth = 5
                local healthBarX = ESPs[character].Box.Position.X - 10
                local healthBarHeight = ESPs[character].Box.Size.Y
                ESPs[character].HealthBarBackground.Size = Vector2.new(healthBarWidth, healthBarHeight)
                ESPs[character].HealthBarBackground.Position = Vector2.new(healthBarX, ESPs[character].Box.Position.Y)
                ESPs[character].HealthBarBackground.Visible = true
                
                -- Health bar
                local healthBarHeightFilled = ESPs[character].Box.Size.Y * healthPercent
                local healthBarY = ESPs[character].Box.Position.Y + ESPs[character].Box.Size.Y - healthBarHeightFilled
                ESPs[character].HealthBar.Size = Vector2.new(healthBarWidth, healthBarHeightFilled)
                ESPs[character].HealthBar.Position = Vector2.new(healthBarX, healthBarY)
                ESPs[character].HealthBar.Color = GetHealthColor(healthPercent)
                ESPs[character].HealthBar.Visible = true
            else
                ESPs[character].HealthBar.Visible = false
                ESPs[character].HealthBarBackground.Visible = false
            end
        else
            ESPs[character].Box.Visible = false
            ESPs[character].NameTag.Visible = false
            ESPs[character].HealthBar.Visible = false
            ESPs[character].HealthBarBackground.Visible = false
        end
    end

    local function Cleanup()
        ESPs[character].Box:Remove()
        ESPs[character].NameTag:Remove()
        ESPs[character].HealthBarBackground:Remove()
        ESPs[character].HealthBar:Remove()
        ESPs[character] = nil
    end

    character:WaitForChild("Humanoid").Died:Connect(Cleanup)
    RunService.RenderStepped:Connect(function()
        if character and character.Parent then
            UpdateESP()
        else
            Cleanup()
        end
    end)
end

local function OnCharacterAdded(character)
    local name = character.Name
    if string.match(name, "Kaigaku") or string.match(name, "Zenitsu") or string.match(name, "Generic") or string.match(name, "Demon") then
        CreateESP(character)
    end
end

local function OnChildAdded(child)
    if child:IsA("Model") then
        OnCharacterAdded(child)
    end
end

workspace.ChildAdded:Connect(OnChildAdded)
for _, child in ipairs(workspace:GetChildren()) do
    OnChildAdded(child)
end

-- Removing previous ESPs
for _, child in ipairs(CoreGui:GetChildren()) do
    if child:IsA("Drawing") then
        child:Remove()
    end
end


local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Vladut e gay",
   LoadingTitle = "demonfal",
   LoadingSubtitle = "de regele rares",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Main", nil) -- Title, Image

local MiscTab = Window:CreateTab("Misc", nil)


local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local isScriptRunning = false -- Variable to track if the script is running
local visitedTrinkets = {} -- Table to store visited trinkets

-- Function to teleport to the nearest trinket and press "E"
local function teleportAndInteractWithTrinkets()
    while isScriptRunning do -- Only run the loop if the script is toggled on
        local nearestTrinket = nil
        local shortestDistance = math.huge

        for _, part in pairs(Workspace.Trinkets:GetChildren()) do
            if part:IsA("BasePart") and part.Name:find("Spawn") and part:FindFirstChild("Spawned") and not visitedTrinkets[part] then
                local distance = (humanoidRootPart.Position - part.Position).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    nearestTrinket = part
                end
            end
        end

        if nearestTrinket then
            visitedTrinkets[nearestTrinket] = true -- Mark the trinket as visited
            humanoidRootPart.CFrame = CFrame.new(nearestTrinket.Position)
            wait(0.5) -- Wait for teleport to complete
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
            wait(0.5) -- Wait for interaction
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
            wait(0.5) -- Wait before teleporting to the next trinket
        else
            break -- Exit the loop if no more trinkets are found
        end
    end
end

-- Function to toggle the script on/off
local function toggleScript(value)
    isScriptRunning = value -- Update the script running status
    if isScriptRunning then
        teleportAndInteractWithTrinkets() -- Start or resume the script
    end
end

-- Create a toggle for the script
local Toggle = MainTab:CreateToggle({
    Name = "Trinket Farm",
    CurrentValue = false, -- Initially off
    Flag = "Toggle1", -- Identifier for configuration
    Callback = toggleScript, -- Toggle callback function
})


local Toggle = MainTab:CreateToggle({
   Name = "WalkSpeed Spoof",
   CurrentValue = false,
   Flag = "WalkSpeedSpoofToggle",
   Callback = function(Value)
       if Value then
           local Spoofed = {}
           local Clone = game.Clone
           local oldIdx
           local oldNewIdx
           local OldNC

           getgenv().Settings = {
               Speed = 150
           }

           local Player = game:GetService("Players").LocalPlayer

           local Methods = {
               "FindFirstChild",
               "FindFirstChildOfClass",
               "FindFirstChildWhichIsA"
           }

           local function SpoofProp(Instance, Property)
               local Cloned = Clone(Instance)

               table.insert(Spoofed, {
                   Instance = Instance,
                   Property = Property,
                   ClonedInstance = Cloned
               })
           end

           oldIdx = hookmetamethod(game, "__index", function(self, key)
               for i,v in next, Spoofed do
                   if self == v.Instance and key == v.Property and not checkcaller() then
                       return oldIdx(v.ClonedInstance, key)
                   end

                   if key == "Parent" and (self == v.ClonedInstance or self == v.Instance) and checkcaller() == false then
                       return oldIdx(v.Instance, key)
                   end
               end

               return oldIdx(self, key)
           end)

           oldNewIdx = hookmetamethod(game, "__newindex", function(self, key, newval, ...)
               for i,v in next, Spoofed do
                   if self == v.Instance and key == v.Property and not checkcaller() then
                       return oldNewIdx(v.ClonedInstance, key, newval, ...)
                   end
               end
               return oldNewIdx(self, key, newval, ...)
           end)

           OldNC = hookmetamethod(game, "__namecall", function(self, ...)
               local Method = getnamecallmethod()

               if not table.find(Methods, Method) or Player.Character == nil or self ~= Player.Character then
                   return OldNC(self, ...)
               end

               local Results = OldNC(self, ...)

               if Results and Results:IsA("Humanoid") and Player.Character and self == Player.Character then
                   for i,v in next, Spoofed do
                       if v.Instance == Results then
                           return v.ClonedInstance
                       end
                   end
               end
               return OldNC(self, ...)
           end)

           for i, Method in next, Methods do
               local Old

               Old = hookfunction(game[Method], function(self, ...)
                   if not Player.Character or self ~= Player.Character then
                       return Old(self, ...)
                   end

                   local Results = Old(self, ...)

                   if Results and Results:IsA("Humanoid") and Player.Character and self == Player.Character then
                       for i,v in next, Spoofed do
                           if v.Instance == Results then
                               return v.ClonedInstance
                           end
                       end
                   end
                   return Old(self, ...)
               end)
           end

           local character = Player.Character

           SpoofProp(character.Humanoid, "WalkSpeed")
           character.Humanoid.WalkSpeed = Settings.Speed

           character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
               character.Humanoid.WalkSpeed = Settings.Speed
           end)

           Player.CharacterAdded:Connect(function(character)
               character:WaitForChild("Humanoid")
               SpoofProp(character.Humanoid, "WalkSpeed")
               character.Humanoid.WalkSpeed = Settings.Speed

               character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                   character.Humanoid.WalkSpeed = Settings.Speed
               end)
           end)
       else
           -- Disable the spoofing functionality here (not implemented in the provided script)
       end
   end
})

local Button = MainTab:CreateButton({
   Name = "TP To Merchant",
   Callback = function()
 local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to teleport to the second merchant
local function teleportToSecondMerchant()
    local npcFolder = Workspace:FindFirstChild("Npcs")
    if npcFolder then
        local foundMerchants = 0
        for _, npc in ipairs(npcFolder:GetChildren()) do
            if npc.Name == "Merchant" then
                foundMerchants = foundMerchants + 1
                if foundMerchants == 2 then
                    if npc:IsA("Model") then
                        local primaryPart = npc.PrimaryPart
                        if primaryPart then
                            humanoidRootPart.CFrame = CFrame.new(primaryPart.Position)
                            return
                        else
                            warn("Second merchant model does not have a primary part.")
                        end
                    elseif npc:IsA("BasePart") then
                        humanoidRootPart.CFrame = CFrame.new(npc.Position)
                        return
                    else
                        warn("Second merchant object is not a model or a part.")
                    end
                end
            end
        end
        warn("Second merchant not found.")
    else
        warn("Npcs folder not found.")
    end
end

-- Call the function to teleport to the second merchant
teleportToSecondMerchant()
   end,
})

local Button = MainTab:CreateButton({
   Name = "TP To Black Nigga",
   Callback = function()
   local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to teleport to the "Black Merchant"
local function teleportToBlackMerchant()
    local npcFolder = Workspace:FindFirstChild("Npcs")
    if npcFolder then
        for _, npc in ipairs(npcFolder:GetChildren()) do
            if npc.Name == "Black Merchant" then
                if npc:IsA("Model") then
                    local primaryPart = npc.PrimaryPart
                    if primaryPart then
                        humanoidRootPart.CFrame = CFrame.new(primaryPart.Position)
                        return
                    else
                        warn("Black Merchant model does not have a primary part.")
                    end
                elseif npc:IsA("BasePart") then
                    humanoidRootPart.CFrame = CFrame.new(npc.Position)
                    return
                else
                    warn("Black Merchant object is not a model or a part.")
                end
            end
        end
        warn("Black Merchant not found.")
    else
        warn("Npcs folder not found.")
    end
end

-- Call the function to teleport to the "Black Merchant"
teleportToBlackMerchant()

   end,
})

-- Function to server hop
local function server_hop()
    -- Check if the game platform supports server hopping
    if game:IsLoaded() then
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId)
    else
        print("Cannot server hop because the game is not fully loaded.")
    end
end

-- Create a button to initiate server hop
local Button = MiscTab:CreateButton({
    Name = "Server Hop",
    Callback = function()
        server_hop()
    end,     
})

local function getFilteredOptions()
    local filteredOptions = {}
    local mobs = game.Workspace:GetChildren()

    for _, mob in ipairs(mobs) do
        if mob:IsA("Model") and (string.find(mob.Name, "Generic") or string.find(mob.Name, "Demon") or string.find(mob.Name, "Kaigaku") or string.find(mob.Name, "Zenitsu")) then
            table.insert(filteredOptions, mob.Name)
        end
    end

    return filteredOptions
end

local function teleportToMob(mobName)
    local mob = game.Workspace:FindFirstChild(mobName)
    if mob then
        local position = mob:GetModelCFrame().Position
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(position))
    else
        warn("Mob not found:", mobName)
    end
end

local Dropdown = MiscTab:CreateDropdown({
    Name = "Dropdown Example",
    Options = getFilteredOptions(),
    CurrentOption = {"Option 1"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Option)
        -- Check if Option is not empty
        if #Option > 0 then
            -- Teleport to the selected mob
            teleportToMob(Option[1])
        else
            warn("No option selected in dropdown callback.")
        end
    end,
})

-- Create the dropdown with dynamic options
local Dropdown = MiscTab:CreateDropdown({
    Name = "Player Teleport",
    Options = getPlayerNames(),
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Option)
        -- The function that takes place when the selected option is changed
        -- The variable (Option) is a table of strings for the current selected options
        local selectedPlayerName = Option[1]
        local player = game.Players:FindFirstChild(selectedPlayerName)
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local character = game.Players.LocalPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame
            end
        end
    end,
})

-- Function to update the dropdown options
local function updateDropdownOptions()
    Dropdown:Refresh(getPlayerNames(), false)
end

-- Connect the function to the Players.PlayerAdded and Players.PlayerRemoving events
game.Players.PlayerAdded:Connect(updateDropdownOptions)
game.Players.PlayerRemoving:Connect(updateDropdownOptions)

-- Initial update of the dropdown options
updateDropdownOptions()

-- Initialize the auto-farm
local isAutoFarming = false

-- Function to start auto-farming
local function startAutoFarm()
    isAutoFarming = true
    while isAutoFarming do
        for _, item in pairs(workspace:GetChildren()) do
            if item:IsA("Tool") or item:IsA("Part") then
                -- Teleport to the item
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = item.CFrame
                -- Interact with the item (example: collect or farm it)
                -- Add your specific logic here, e.g., collecting the item
                wait(1) -- Adjust the wait time as necessary
            elseif item:IsA("Model") and item:FindFirstChild("Humanoid") then
                -- Teleport to the enemy
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = item.PrimaryPart.CFrame
                -- Attack the enemy (example: if they are models with Humanoids)
                -- Add your specific attack logic here
                wait(1) -- Adjust the wait time as necessary
            end
        end
        wait(1) -- Wait time between each iteration of the loop
    end
end

-- Function to stop auto-farming
local function stopAutoFarm()
    isAutoFarming = false
end

-- Create the dropdown
local Dropdown = MainTab:CreateDropdown({
    Name = "Auto-Farm",
    Options = {"Start", "Stop"},
    CurrentOption = {"Stop"},
    MultipleOptions = false,
    Flag = "AutoFarmDropdown",
    Callback = function(Option)
        if Option[1] == "Start" then
            startAutoFarm()
        else
            stopAutoFarm()
        end
    end,
})

-- Ensure the auto-farm stops when the player leaves the game
game.Players.LocalPlayer.OnLeave:Connect(stopAutoFarm)
